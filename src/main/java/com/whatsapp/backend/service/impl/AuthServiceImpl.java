package com.whatsapp.backend.service.impl;

import com.whatsapp.backend.dao.model.Account;
import com.whatsapp.backend.dao.model.Role;
import com.whatsapp.backend.dao.repo.AccountRepo;
import com.whatsapp.backend.dto.LoginRequest;
import com.whatsapp.backend.dto.RegisterAccountRequest;
import com.whatsapp.backend.dto.RegisterAccountResponse;
import com.whatsapp.backend.mapper.Usermapper;
import com.whatsapp.backend.security.PasswordEncoderConfig;
import com.whatsapp.backend.service.AuthService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
@AllArgsConstructor // Lombok generates a constructor for all fields in the class
public class AuthServiceImpl implements AuthService {
    // The constructor is automatically generated by Lombok.
    // Spring will inject the 'Usermapper' dependency through this constructor.
    private final Usermapper usermapper;
    private final AccountRepo accountRepo;
    private final PasswordEncoderConfig passwordEncoderConfig;

    @Override
    public String login(LoginRequest loginRequest) {
return "";
    }

    @Override
    public RegisterAccountResponse register(RegisterAccountRequest registerAccountRequest) {
        Account account = usermapper.mapRegisterRequestToAccount(registerAccountRequest);
        account.setPassword(passwordEncoderConfig.getPasswordEncoder().encode(account.getPassword()));
        account.setRole(Collections.singletonList(Role.ROLE_USER));
        Account registeredAccount = accountRepo.save(account);
        return usermapper.mapAccountToRegisterAccountResponse(registeredAccount);
    }
}
