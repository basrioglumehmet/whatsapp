spring.application.name=backend
server.port=8082

spring.data.mongodb.uri=mongodb://localhost:27017/chatapplication

logging.level.org.springframework.data=debug

# Salt length for password encoding.
# A longer salt (e.g., 16 or 32 bytes) is more secure as it makes precomputation attacks more difficult.
# Recommended: 16 bytes (but can go higher for better security).
application.security.saltlength=16

# Hash length for the encoded password.
# A longer hash increases security by making the hash more resistant to brute-force attacks.
# Recommended: 32 bytes. Commonly used hash lengths are 32 or 64 bytes.
application.security.hashlength=32

# Number of threads used for parallel processing in the password encoder.
# A higher number of threads will increase the processing speed, but it will also consume more CPU resources.
# Recommended: 4 threads (adjust based on the number of CPU cores).
application.security.threadsize=4

# Memory cost for the password encoder (in kilobytes).
# Higher memory usage increases the time and resources required for brute-force attacks.
# Recommended: 4096 KB (4 MB), higher values will make brute-force attacks slower but consume more system resources.
application.security.memorysize=4096

# Number of iterations for the password hashing process.
# More iterations increase the computational cost of hashing, making it harder to crack the password using brute-force attacks.
# Recommended: 3-5 iterations. In production systems, you can go higher (e.g., 1000 iterations for Argon2).
application.security.iterations=3
# this part for jwt utils section
app.jwt.secret=
app.jwt.expiration=